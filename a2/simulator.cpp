#include "simulator.h"
#include <iomanip>

using namespace std;

int num_txns = 0;
int time_stamp = 0;

int txnIDctr = 0;            // for setting txn ID
int blkIDctr = 1;            // for setting block ID
long long int curr_time = 0; // time counter
float Tt = 0;
float I = 0;
float Ttx = 0;
int numPeers = 0;
bool eclipse_attack = false;
Block *genesisBlock;
int mal_blocks = 0;

/* Starts the simulation */
void Sim::start()
{
    srand(time(0));
    // initialise the genesis block which is commomn for both the networks
    genesisBlock = new Block(0, -1, "parent_of_genesis", {});

    // add the genesis block to the tree at each node and start mining on it
    // start making transactions too
    for (auto &peer : peers)
    {
        peer->createTree(genesisBlock);
        peer->generateBlock();
        peer->generateTransaction();
    }
    
    // run for simTime units
    while (curr_time < simTime)
    {
        normNet->run(curr_time); // one pass of simulation of original network
        if (malFraction != 0)
            malNet->run(curr_time); // one pass of simulatio of overlay network
        curr_time++;
    }
    stop();
}

/*
Simulation stops
*/
void Sim::stop()
{
    if (malNet)
    {
        cout << "Simulation ended, releasing private chain" << endl;
        peers[malNet->ringmasterID]->startReleasingChain();
        malNet->stop = true;
        normNet->stop = true;
        long long threshold = curr_time + simTime/2;
        while ((!(malNet->sendingQueue.empty()) || !(normNet->sendingQueue.empty())) && curr_time < threshold)
        {
            normNet->clearRun();
            malNet->clearRun();
            curr_time++;
        }
    }
}

int main(int argc, char **argv)
{
    if (argc != 8)
    {
        cout << "USAGE: ./{executable} {number of peers} {percentage of malicious nodes} {I} {Ttx} {Timeout time} {simulation time} {eclipse attack?(0/1)}" << endl;
        return 1;
    }
    numPeers = stoi(argv[1]);
    I = stof(argv[3]);
    Ttx = stof(argv[4]) * 1000;
    Tt = stof(argv[5]) * 1000;
    eclipse_attack = stoi(argv[7]);
    double malFraction = double(stoi(argv[2])) / 100;

    Sim *simulator = new Sim(stoi(argv[1]), malFraction, stoi(argv[6]) * 1000);
    cout << "-----------------------------------------Starting the simulation-----------------------------------------" << endl;
    simulator->start();

    // cout << setw(7) << "Peer ID" << setw(32) << "Blocks owned in Longest Chain" << setw(15) << "Blocks mined" << setw(10) << "Ratio" << setw(25) << "Blocks in Longest Chain" << setw(25) << "Transactions generated" << "orphan blks" << endl;
    // cout << string(130, '-') << endl;
    for (auto p : simulator->peers)
    {
        // cout << setw(7) << p->peerID
        //      << setw(32) << p->blocks_in_longest_chain()
        //      << setw(15) << int(p->total_blocks)
        //      << setw(10) << fixed << setprecision(2) << (p->total_blocks > 0 ? static_cast<double>(p->blocks_in_longest_chain()) / p->total_blocks : 0)
        //      << setw(25) << p->maxDepth
        //      << setw(25) << p->total_transactions
        //      << setw(25) << p->orphanBlocks.size()
        //      << endl;

        p->writeBlockTimesToFile();
    }
    pair<int, int> ring_info = simulator->peers[simulator->malNet->ringmasterID]->blocks_in_longest_chain();
    cout << "Malicious blocks in longest chain of ringmaster = " << ring_info.first << endl;
    cout << "Total blocks in longest chain of ringmaster = " << ring_info.second << endl;
    cout << "Total malicious blocks = " << mal_blocks << endl;
    cout << "Ratio of the number of blocks generated by malicious nodes in the longest chain at the ringmaster to the total blocks in the longest chain at the ringmaster = " << fixed << setprecision(2) << (ring_info.second > 0 ? static_cast<double>(ring_info.first) / ring_info.second : 0) << endl;
    cout << "Ratio of the number of blocks generated by malicious nodes in the longest chain at the ringmaster to the total blocks generated by the malicious nodes = " << fixed << setprecision(2) << (mal_blocks > 0 ? static_cast<double>(ring_info.first) / mal_blocks : 0) << endl;

    cout << "------------------------------------------------Simulation ended------------------------------------------" << endl;

    return 0;
}
